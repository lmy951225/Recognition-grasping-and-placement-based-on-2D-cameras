# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import agile_robot_pb2 as agile__robot__pb2


class ControllerServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.unary_unary(
                '/ControllerServer.ControllerServer/connect',
                request_serializer=agile__robot__pb2.ControllerIP.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.disConnect = channel.unary_unary(
                '/ControllerServer.ControllerServer/disConnect',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.reset = channel.unary_unary(
                '/ControllerServer.ControllerServer/reset',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.setUpRobot = channel.unary_unary(
                '/ControllerServer.ControllerServer/setUpRobot',
                request_serializer=agile__robot__pb2.ManipulatorType.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.getName = channel.unary_unary(
                '/ControllerServer.ControllerServer/getName',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.GetNameReply.FromString,
                )
        self.getServerVersion = channel.unary_unary(
                '/ControllerServer.ControllerServer/getServerVersion',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.GetServerVersionReply.FromString,
                )
        self.enableRobot = channel.unary_unary(
                '/ControllerServer.ControllerServer/enableRobot',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.disableRobot = channel.unary_unary(
                '/ControllerServer.ControllerServer/disableRobot',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.setSpeedRatio = channel.unary_unary(
                '/ControllerServer.ControllerServer/setSpeedRatio',
                request_serializer=agile__robot__pb2.SetSpeedRatioRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.getIO = channel.unary_unary(
                '/ControllerServer.ControllerServer/getIO',
                request_serializer=agile__robot__pb2.GetIORequest.SerializeToString,
                response_deserializer=agile__robot__pb2.GetIOReply.FromString,
                )
        self.setIO = channel.unary_unary(
                '/ControllerServer.ControllerServer/setIO',
                request_serializer=agile__robot__pb2.SetIORequest.SerializeToString,
                response_deserializer=agile__robot__pb2.SetIOReply.FromString,
                )
        self.getJointPosition = channel.unary_unary(
                '/ControllerServer.ControllerServer/getJointPosition',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.GetJointPositionReply.FromString,
                )
        self.getPose = channel.unary_unary(
                '/ControllerServer.ControllerServer/getPose',
                request_serializer=agile__robot__pb2.FakeInput.SerializeToString,
                response_deserializer=agile__robot__pb2.GetPoseReply.FromString,
                )
        self.moveJoint = channel.unary_unary(
                '/ControllerServer.ControllerServer/moveJoint',
                request_serializer=agile__robot__pb2.JointPosition.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.movePose = channel.unary_unary(
                '/ControllerServer.ControllerServer/movePose',
                request_serializer=agile__robot__pb2.CartesianPosition.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.uploadFlyShotTraj = channel.unary_unary(
                '/ControllerServer.ControllerServer/uploadFlyShotTraj',
                request_serializer=agile__robot__pb2.UploadFlyShotTrajRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.deleteFlyShotTraj = channel.unary_unary(
                '/ControllerServer.ControllerServer/deleteFlyShotTraj',
                request_serializer=agile__robot__pb2.DeleteFlyShotTrajRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.isFlyShotTrajValid = channel.unary_unary(
                '/ControllerServer.ControllerServer/isFlyShotTrajValid',
                request_serializer=agile__robot__pb2.IsFlyShotTrajValidRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.IsFlyShotTrajValidReply.FromString,
                )
        self.optimizeKinematicsParams = channel.unary_unary(
                '/ControllerServer.ControllerServer/optimizeKinematicsParams',
                request_serializer=agile__robot__pb2.OptimizeKinematicsParamsRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.OptimizeKinematicsParamsReply.FromString,
                )
        self.executeFlyShotTraj = channel.unary_unary(
                '/ControllerServer.ControllerServer/executeFlyShotTraj',
                request_serializer=agile__robot__pb2.ExecuteFlyShotTrajRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.AlgoRes.FromString,
                )
        self.getRobotProgramInfo = channel.unary_unary(
                '/ControllerServer.ControllerServer/getRobotProgramInfo',
                request_serializer=agile__robot__pb2.GetRobotProgramRequest.SerializeToString,
                response_deserializer=agile__robot__pb2.GetRobotProgramReply.FromString,
                )


class ControllerServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def connect(self, request, context):
        """客户端连接服务，使服务端与机械臂通讯
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disConnect(self, request, context):
        """客户端断开连接服务，使服务端与机械臂断开通讯
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reset(self, request, context):
        """机械臂清除警报
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setUpRobot(self, request, context):
        """定义机械臂型号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getName(self, request, context):
        """获得当前机械臂运动学模型的机械臂型号名称
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getServerVersion(self, request, context):
        """获取机械臂控制服务算法版本号
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def enableRobot(self, request, context):
        """机械臂上使能
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def disableRobot(self, request, context):
        """机械臂下使能
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setSpeedRatio(self, request, context):
        """设置机械臂运行速度比率 0.0~1.0，对于单步移动及轨迹运行均有效
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getIO(self, request, context):
        """获取当前IO状态，同时支持多路
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setIO(self, request, context):
        """设置IO状态，同时支持多路
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getJointPosition(self, request, context):
        """获取当前机械臂关节角度，返回单位：rad
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPose(self, request, context):
        """获取当前机械臂末端TCP中心位姿，XYZRxRyRz，单位：degree
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def moveJoint(self, request, context):
        """根据关节值单步移动，线性插值方式，输入值单位：rad
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def movePose(self, request, context):
        """根据机械臂末端TCP中心位姿，实现单步移动，线性插值方式
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadFlyShotTraj(self, request, context):
        """上传飞拍轨迹
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteFlyShotTraj(self, request, context):
        """删除飞拍轨迹
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def isFlyShotTrajValid(self, request, context):
        """校验飞拍轨迹是否运动学超限、关节超限以及是否碰撞
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def optimizeKinematicsParams(self, request, context):
        """优化轨迹规划时的动力学参数系数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def executeFlyShotTraj(self, request, context):
        """执行飞拍轨迹
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getRobotProgramInfo(self, request, context):
        """获取机器人程序信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ControllerServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.unary_unary_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=agile__robot__pb2.ControllerIP.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'disConnect': grpc.unary_unary_rpc_method_handler(
                    servicer.disConnect,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'setUpRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.setUpRobot,
                    request_deserializer=agile__robot__pb2.ManipulatorType.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'getName': grpc.unary_unary_rpc_method_handler(
                    servicer.getName,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.GetNameReply.SerializeToString,
            ),
            'getServerVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getServerVersion,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.GetServerVersionReply.SerializeToString,
            ),
            'enableRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.enableRobot,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'disableRobot': grpc.unary_unary_rpc_method_handler(
                    servicer.disableRobot,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'setSpeedRatio': grpc.unary_unary_rpc_method_handler(
                    servicer.setSpeedRatio,
                    request_deserializer=agile__robot__pb2.SetSpeedRatioRequest.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'getIO': grpc.unary_unary_rpc_method_handler(
                    servicer.getIO,
                    request_deserializer=agile__robot__pb2.GetIORequest.FromString,
                    response_serializer=agile__robot__pb2.GetIOReply.SerializeToString,
            ),
            'setIO': grpc.unary_unary_rpc_method_handler(
                    servicer.setIO,
                    request_deserializer=agile__robot__pb2.SetIORequest.FromString,
                    response_serializer=agile__robot__pb2.SetIOReply.SerializeToString,
            ),
            'getJointPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.getJointPosition,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.GetJointPositionReply.SerializeToString,
            ),
            'getPose': grpc.unary_unary_rpc_method_handler(
                    servicer.getPose,
                    request_deserializer=agile__robot__pb2.FakeInput.FromString,
                    response_serializer=agile__robot__pb2.GetPoseReply.SerializeToString,
            ),
            'moveJoint': grpc.unary_unary_rpc_method_handler(
                    servicer.moveJoint,
                    request_deserializer=agile__robot__pb2.JointPosition.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'movePose': grpc.unary_unary_rpc_method_handler(
                    servicer.movePose,
                    request_deserializer=agile__robot__pb2.CartesianPosition.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'uploadFlyShotTraj': grpc.unary_unary_rpc_method_handler(
                    servicer.uploadFlyShotTraj,
                    request_deserializer=agile__robot__pb2.UploadFlyShotTrajRequest.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'deleteFlyShotTraj': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteFlyShotTraj,
                    request_deserializer=agile__robot__pb2.DeleteFlyShotTrajRequest.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'isFlyShotTrajValid': grpc.unary_unary_rpc_method_handler(
                    servicer.isFlyShotTrajValid,
                    request_deserializer=agile__robot__pb2.IsFlyShotTrajValidRequest.FromString,
                    response_serializer=agile__robot__pb2.IsFlyShotTrajValidReply.SerializeToString,
            ),
            'optimizeKinematicsParams': grpc.unary_unary_rpc_method_handler(
                    servicer.optimizeKinematicsParams,
                    request_deserializer=agile__robot__pb2.OptimizeKinematicsParamsRequest.FromString,
                    response_serializer=agile__robot__pb2.OptimizeKinematicsParamsReply.SerializeToString,
            ),
            'executeFlyShotTraj': grpc.unary_unary_rpc_method_handler(
                    servicer.executeFlyShotTraj,
                    request_deserializer=agile__robot__pb2.ExecuteFlyShotTrajRequest.FromString,
                    response_serializer=agile__robot__pb2.AlgoRes.SerializeToString,
            ),
            'getRobotProgramInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.getRobotProgramInfo,
                    request_deserializer=agile__robot__pb2.GetRobotProgramRequest.FromString,
                    response_serializer=agile__robot__pb2.GetRobotProgramReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ControllerServer.ControllerServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ControllerServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/connect',
            agile__robot__pb2.ControllerIP.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disConnect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/disConnect',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/reset',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setUpRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/setUpRobot',
            agile__robot__pb2.ManipulatorType.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getName',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.GetNameReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getServerVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getServerVersion',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.GetServerVersionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def enableRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/enableRobot',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def disableRobot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/disableRobot',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setSpeedRatio(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/setSpeedRatio',
            agile__robot__pb2.SetSpeedRatioRequest.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getIO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getIO',
            agile__robot__pb2.GetIORequest.SerializeToString,
            agile__robot__pb2.GetIOReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setIO(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/setIO',
            agile__robot__pb2.SetIORequest.SerializeToString,
            agile__robot__pb2.SetIOReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getJointPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getJointPosition',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.GetJointPositionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getPose',
            agile__robot__pb2.FakeInput.SerializeToString,
            agile__robot__pb2.GetPoseReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def moveJoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/moveJoint',
            agile__robot__pb2.JointPosition.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def movePose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/movePose',
            agile__robot__pb2.CartesianPosition.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadFlyShotTraj(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/uploadFlyShotTraj',
            agile__robot__pb2.UploadFlyShotTrajRequest.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteFlyShotTraj(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/deleteFlyShotTraj',
            agile__robot__pb2.DeleteFlyShotTrajRequest.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def isFlyShotTrajValid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/isFlyShotTrajValid',
            agile__robot__pb2.IsFlyShotTrajValidRequest.SerializeToString,
            agile__robot__pb2.IsFlyShotTrajValidReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def optimizeKinematicsParams(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/optimizeKinematicsParams',
            agile__robot__pb2.OptimizeKinematicsParamsRequest.SerializeToString,
            agile__robot__pb2.OptimizeKinematicsParamsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def executeFlyShotTraj(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/executeFlyShotTraj',
            agile__robot__pb2.ExecuteFlyShotTrajRequest.SerializeToString,
            agile__robot__pb2.AlgoRes.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getRobotProgramInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ControllerServer.ControllerServer/getRobotProgramInfo',
            agile__robot__pb2.GetRobotProgramRequest.SerializeToString,
            agile__robot__pb2.GetRobotProgramReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
